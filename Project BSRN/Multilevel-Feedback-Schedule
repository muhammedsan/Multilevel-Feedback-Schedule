#Bibliothek
import argparse

#Bibliothek für Gantt-Diagramm
#Pyplot durch "as pyp" in pyp umbenannt
import matplotlib.pyplot as pyp

parser = argparse.ArgumentParser(description= 'Prozesse einlesen')
parser.add_argument('-processlistfile', type=str, required=True,help ='Geben Sie den Pfad zur Prozessliste an')
args = parser.parse_args()
process_list_file = args.processlistfile

#Dictionary besser als Klasse, um Prozess darzustellen?
def lese_prozess_list(dateiname):
    prozesse = []
    with open(dateiname, 'r') as file:
        for line in file:
            parts = line.strip().split('')
            if len(parts)== 3: #Überprüfung der Zeilendaten
            
            #Dictionary 
              prozess = {
                'name': parts[0],
                'cpu_time': int(parts[1]),
                'ankunftszeit': int(parts[2])
            }
            prozesse.append(prozess)
            return 

#Prozesse aus der Datei lesen
prozess_liste = lese_prozess_list(process_list_file)


#Benutzer nach der Anzahl der Warteschlangen und Zeitquanten fragen
anzahlWS = int(input('Gebe die Anzahl der Warteschlangen an: '))
zeitquanten = int('Gebe das jeweilige Zeitquantum an')


#Gantt-Diagramm
#(man kann noch schriftgröse und platzierung der Titel einstellen)
fig, achse = pyp.subplots()

#Wert für breite notwendig 
for i, prozess in enumerate(prozess_liste) :
    achse.barh(prozess, width = cpu_zeit, left = ankunftszeit, color = "green")

#Limiter für x und y Achse muss gesetzt werden
pyp.xlim()
pyp.xlabel("Zeit in Sekunden")

pyp.ylim()
pyp.ylabel("Prozesse")

pyp.title("Gantt-Diagramm der Prozessverarbeitung")

pyp.show()