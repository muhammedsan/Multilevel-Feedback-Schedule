import argparse
import logging
import matplotlib.pyplot as plt

# Parser für Befehlszeilenargument erstellen
parser = argparse.ArgumentParser(description= 'Prozessverwaltung')

# Argumente definieren
parser.add_argument('-warteschlangen', type=int,required =False, help='Anzahl der Warteschlangen')
parser.add_argument('-quantum', type=int, nargs='+', required=False, help='Gebe Zeitquanten für jede Warteschlange an')
parser.add_argument('-processlistfile', type=str, help='Der Dateiname der Prozessliste')
parser.add_argument('-logdatei', type=str, help='Der Name der Logdatei')
parser.add_argument('-ausgabeformat', type=str, choices=['text', 'grafisch'], help='Das Ausgabeformat text oder grafisch')
parser.add_argument('-ausgabedatei', type=str, help='Der Name Ausgabedatei')

# Argumente auswerfen 
args = parser.parse_args()

# Kommandozeilenargumente werden überprüft
def pruefe_argumente (args):
   fehler = False 
   if args.warteschlangen is not None and args.warteschlangen <= 0:
           print("Fehler: Die Anzahl der Warteschlangen muss größer als 0 sein")
           fehler = True 
       
   if args.quantum is not None and any(q <= 0 for q in args.quantum):
           print("Fehler: Alle Zeitquanten müssen größer als 0 sein")        
           fehler = True 
       
   if args.warteschlangen and len(args.quantum) != args.warteschlangen:
           print("Fehler: Die Anzahl der Zeitquanten muss der Anzahl der Warteschlangen entsprechen")
           fehler = True 

   return not fehler 

interaktive_eingabe = False
zeitquanten = []

# Argumente wurden validiert und akzeptiert    
if not pruefe_argumente(args):   
    interaktive_eingabe = True   
    anzahlWS = int(input('Gebe die Anzahl der Warteschlangen an: '))
    while anzahlWS <= 0:
        print("Die Anzahl der Warteschlangen muss größer als 0 sein")
        anzahlWS = int(input('Gebe die Anzahl der Warteschlangen an'))
 
    for i in range(anzahlWS):
        quantum = int(input(f'Gebe das Zeitquantum für Warteschlange {i+1} an:'))
        while quantum <= 0:
            print("Das Zeitquantum muss größer als 0 sein")
            quantum = int(input(f'Gebe das Zeitquantum für Warteschlange {i+1} an:'))
        zeitquanten.append(quantum)
else:
    anzahlWS = args.warteschlangen 
    zeitquanten = args.quantum

# Dateipfad aus den Argumenten auslesen
process_list_file = args.processlistfile

if interaktive_eingabe:
    print('Anzahl der Warteschlangen:', anzahlWS)
    print('Zeitquantum: ',zeitquanten)
    print(f'Verwendeter Dateipfad: {process_list_file}')    
    
else: # Eingaben überprüfen
    print("\nÜberprüfen Sie Ihre Eingaben: ")
    print(f"Anzahl der Warteschlangen: {args.warteschlangen}")
    print(f"Quanten: {args.quantum}")
    print(f"Prozessliste: {args.processlistfile}")
    print(f"Logdatei: {args.logdatei}")
    print(f"Ausgabedatei: {args.ausgabedatei}")
    print(f"Ausgabeformat: {args.ausgabeformat}")

# Methode zum Einlesen der P
def lese_prozess_list(dateiname):
    prozesse = []
    try:
       with open(dateiname, 'r') as file:
           for line in file:
               parts = line.strip().split(',')
               if len(parts) == 3:  
                   # Dictionary 
                   prozess = {
                       'name': parts[0],
                       'cpu_zeit': int(parts[1]),
                       'ankunftszeit': int(parts[2])
                }
               prozesse.append(prozess)
    except FileNotFoundError:
        print(f'Fehler: Die Datei {dateiname} wurde nicht gefunden.')
        return []
    except Exception as e:
        print(f'Ein Fehler ist aufgetreten: {e}')
        return []
    return prozesse   

# P - Liste wird returned
prozess_liste = lese_prozess_list(args.processlistfile)

# Grundkonfiguration Logdatei
logging.basicConfig(filename=args.logdatei, level=logging.INFO, format='%(asctime)s - %(message)s')

# Start Multilevel-Feedback-Schedule
scheduling_warteschlangen = list(zip(zeitquanten, [[] for _ in range(anzahlWS)])) # Tupel[(Q1,W1),(Q2,WS2),....(Qn,WSn)]
laufzeit = {prozess['name']: 0 for prozess in prozess_liste} 
gesamt_wartezeit = {prozess['name']: 0 for prozess in prozess_liste}
letzter_cpu_zugriff = {prozess['name']: prozess['ankunftszeit'] for prozess in prozess_liste} # P ab Ankunft bereit!
original_cpu_zeit = {prozess['name']: prozess['cpu_zeit'] for prozess in prozess_liste}
zeit = 0 

def update_wartezeiten(prozess, zeit):
    # Prüfe, ob der P warten musste, bevor er bearbeitet wird
    if zeit > prozess['ankuntfszeit']:
        
        if letzter_cpu_zugriff[prozess['name']] < prozess['ankunftszeit']:
            # Der P hat noch nie die CPU betreten
            wartezeit = zeit - prozess['ankunftszeit']
            
        else: 
            # der P war bereits auf der CPU und wartet auf die erneute Zuteilung
            wartezeit = zeit - letzter_cpu_zugriff[prozess['name']]
            gesamt_wartezeit[prozess['name']] += wartezeit
            letzter_cpu_zugriff[prozess['name']] = zeit + prozess['cpu_zeit']
            
    else:
        # Es gibt keine Wartezeit zu erfassen, da der P sofort bearbeitet wird
        letzter_cpu_zugriff[prozess['name']] = zeit

def update_laufzeiten(prozess, ausgefuehrte_zeit):
    laufzeit[prozess['name']] += ausgefuehrte_zeit

# Alle P werden in die erste WS eingefügt
for prozess in prozess_liste:
    scheduling_warteschlangen[0][1].append(prozess)
    
def round_robin_algorithmus(scheduling_warteschlangen): 
    ausfuehrung_reihenfolge = []
    global zeit
    i = 0
    while i < len(scheduling_warteschlangen):
        quantum, warteschlange = scheduling_warteschlangen[i]
        while warteschlange: # Verarbeitet die aktuelle WS
            prozess = warteschlange.pop(0) # P wird aus WS entfernt

            logging.info(f"Prozess {prozess['name']} wird aus der Warteschlange genommen")
            logging.info(f"Aktuelle Zeit: {zeit}")
             
            alte_wartezeit = gesamt_wartezeit[prozess['name']] # Zur detaillierten Protokollierung, um Fehler zu erkennen
            update_wartezeiten(prozess, zeit)
            logging.info(f"Wartezeit für {prozess['name']} aktualisiert von {alte_wartezeit} zu {gesamt_wartezeit[prozess['name']]}") # Zur detaillierten Protokollierung, um Fehler zu erkennen
            
            # Startsignal 
            logging.info(f"Prozess {prozess['name']} wird bearbeitet")

            # Wähle den kleineren Wert !
            ausfuehrungs_zeit = min(quantum, prozess['cpu_zeit'])
            
            # Reduzierung der CPU-Zeit
            prozess['cpu_zeit'] -= ausfuehrungs_zeit
            logging.info(f"Prozess {prozess['name']} bearbeitet für {ausfuehrungs_zeit} Sekunden. Verbleibende CPU-Zeit: {prozess['cpu_zeit']}")
            
            zeit += ausfuehrungs_zeit
            logging.info(f"Letzter CPU-Zugriff für {prozess['name']} auf Zeit {zeit} gesetzt")
             
            # Aktualisiere letzter_cpu_zugriff nach Wartezeitberechnung!
            letzter_cpu_zugriff[prozess['name']] = zeit
            logging.info(f"Prozess {prozess['name']} Wartezeit: {gesamt_wartezeit}")

            # Update der Laufzeit
            update_laufzeiten(prozess, ausfuehrungs_zeit)

            # Weiterleitung in tiefere WS    
            if prozess['cpu_zeit'] > 0: 
                ausfuehrung_reihenfolge.append((prozess['name'], zeit-ausfuehrungs_zeit, zeit, False))
                        
                if i < len(scheduling_warteschlangen) - 1: # Existiert eine tiefere WS
                    scheduling_warteschlangen[i+1][1].append(prozess) # Füge P ein
                    
                else: 
                    warteschlange.append(prozess) # Ansonsten bleibe drin
                    
            else:
                ausfuehrung_reihenfolge.append((prozess['name'], zeit-ausfuehrungs_zeit, zeit, True))
                laufzeit[prozess['name']] = zeit - prozess['ankunftszeit']
                logging.info(f"Prozess {prozess['name']} abgeschlossen.")

        i += 1
        
    return ausfuehrung_reihenfolge

# Aufruf der Funktion
ausfuehrung_reihenfolge = round_robin_algorithmus(scheduling_warteschlangen)

print('Zusammenfassung der Prozessdaten:')
for prozess in prozess_liste:
    print(f"Prozess: {prozess['name']}, Original CPU Zeit: {original_cpu_zeit[prozess['name']]}, "
          f"Verbleibende CPU Zeit: {prozess['cpu_zeit']}, Ankunftszeit: {prozess['ankunftszeit']}, "
          f"Laufzeit: {laufzeit[prozess['name']]}, Wartezeit: {gesamt_wartezeit[prozess['name']]}")

# Durchschnittliche Laufzeit und Wartezeit berechnen
durchschnittliche_laufzeit = sum(laufzeit[prozess['name']] - prozess['ankunftszeit'] for prozess in prozess_liste) / len(prozess_liste)
durchschnittliche_wartezeit = sum(gesamt_wartezeit[prozess['name']] for prozess in prozess_liste) / len(prozess_liste)

# Gantt-Diagramm
def erstelle_gantt_diagramm(dateiname, ausfuehrung_reihenfolge): 
 fig, achse = plt.subplots(figsize=(10,6)) # Erstellen eines Diagramms 
 farben = {'vollständig':'limegreen','unvollständig': 'orange'} # Dictionary für die Farbzuordnung
 balken_hoehe = 0.4 # Höhe der Gantt Balken

 # Iterieren durch die Liste ausfuehrung_reihenfolge
 for(name, start, ende, abgeschlossen) in ausfuehrung_reihenfolge: 
     farbe = farben['vollständig'] if abgeschlossen else farben['unvollständig'] # Farbzuweisung basierend auf dem Abschlussstatus des P
     achse.barh(name, ende-start, left=start, height=balken_hoehe, color=farbe, edgecolor='black') # Zeichnet einen Balken für den aktuellen P

# Diagrammtitel 
 plt.title("Gantt-Diagramm der Prozessverarbeitung", fontsize=14, fontweight='bold')

# Achsenbeschriftungen 
 achse.set_xlabel('Zeit (in Sekunden)', fontsize=10)
 achse.set_ylabel('Prozesse', fontsize=10)

 # Gitterlinien 
 achse.grid(True, linestyle='--', linewidth=0.5, zorder=0)

 # Legende 
 from matplotlib.patches import Patch
 legende = [Patch(color=farben['vollständig'],label='Abgeschlossen'),
            Patch(color=farben['unvollständig'], label='Unvollständig')]
 achse.legend(handles=legende, title='Status', fontsize=10)

 # Diagramm speichern und schließen 
 plt.tight_layout()
 plt.savefig(dateiname)
 plt.close()

if args.ausgabeformat== 'text': 
# Öffnen der Ausgabedatei und schreiben der Prozessinformationen
    with open(args.ausgabedatei,'w') as f:
        f.write('Anzahl der Warteschlangen: {}\n'.format(anzahlWS))
        f.write('Zeitquanten: {}\n'.format(zeitquanten))
     # Überschrift für die Prozessinformationen schreiben
        f.write('Laufzeiten und Wartezeiten für jeden Prozess:\n')
     # Schleife durch die Prozessliste zum Schreiben der Prozessdetails
        for prozess in prozess_liste:
            f.write('Prozess: {}, CPU Zeit: {}, Ankunftszeit: {}, Laufzeit: {}, Wartezeit: {}, {}\n'.format(
                prozess['name'], prozess['cpu_zeit'], prozess['ankunftszeit'],
                laufzeit[prozess['name']], gesamt_wartezeit[prozess['name']], zeit))
        f.write('Durchschnittliche Laufzeit: {:.2f} Sekunden\n'.format(durchschnittliche_laufzeit))
        f.write('Durchschnittliche Wartezeit: {:.2f} Sekunden\n'.format(durchschnittliche_wartezeit))

else: 
   erstelle_gantt_diagramm(args.ausgabedatei, ausfuehrung_reihenfolge) # Gantt-Diagramm in der Ausgabedatei speichern 



