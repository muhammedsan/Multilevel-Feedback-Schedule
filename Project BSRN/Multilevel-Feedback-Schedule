import argparse
import logging
import sys
import matplotlib.pyplot as plt

# Parser für Befehlszeilenargument erstellen
parser = argparse.ArgumentParser(description= 'Prozessverwaltung')

# Argumente definieren
parser.add_argument('-warteschlangen', type=int,required =False, help='Anzahl der Warteschlangen')
parser.add_argument('-quantum', type=int, nargs='+', required=False, help='Gebe Zeitquanten für jede Warteschlange an')
parser.add_argument('-processlistfile', type=str, help='Der Dateiname der Prozessliste')
parser.add_argument('-logdatei', type=str, help='Der Name der Logdatei')
parser.add_argument('-ausgabedatei', type=str, help='Der Name Ausgabedatei')
parser.add_argument('-ausgabeformat', type=str, choices=['text', 'grafisch'], help='Das Ausgabeformat text oder grafisch')

# Argumente auswerfen 
args = parser.parse_args()

# Dateipfad aus den Argumenten auslesen
process_list_file = args.processlistfile

# Kommandozeilenagrumente werden überprüft
def pruefe_argumente (args):
   fehler = False # Variable zur Fehlererkennung initalisieren 
   # Überprüfen, ob die Anzahl der Warteschlangen angegben und größer als 0 ist, statt verschachtelte  if-Bedingung zu verwenden
   if args.warteschlangen is not None and args.warteschlangen <= 0:
           print("Fehler: Die Anzahl der Warteschlangen muss größer als 0 sein")
           fehler = True 
       
   if args.quantum is not None and any(q <= 0 for q in args.quantum):
           print("Fehler: Alle Zeitquanten müssen größer als 0 sein")        
           fehler = True 
       
   if args.warteschlangen and len(args.quantum) != args.warteschlangen:
           print("Fehler: Die Anzahl der Zeitquanten muss der Anzahl der Warteschlangen entsprechen")
           fehler = True 
   return not fehler # Rückgabe des negierten Werts der Fehler-Variable

# Variable zur Feststellung, ob interaktive Eingaben benötigt werden
interaktive_eingabe = False

# Argumente wurden validiert und akzeptiert    
if not pruefe_argumente(args):   
    # Wenn die Argumente nicht gültig sind, wird die interaktive Eingabe auf True gesetzt
    interaktive_eingabe = True   
    anzahlWS = int(input('Gebe die Anzahl der Warteschlangen an: '))
    while anzahlWS <= 0:
        print("Die Anzahl der Warteschlangen muss größer als 0 sein")
        anzahlWS = int(input('Gebe die Anzahl der Warteschlangen an'))


    for i in range(anzahlWS):
        quantum = int(input(f'Gebe das Zeitquantum für Warteschlange {i+1} an:'))
        while quantum <= 0:
            print("Das Zeitquantum muss größer als 0 sein")
            quantum = int(input(f'Gebe das Zeitquantum für Warteschlange {i+1} an:'))
        zeitquanten.append(quantum)
else:
    # Argumentwerte aus Kommandozeile verwenden, wenn sie gültig sind
    anzahlWS = args.warteschlangen 
    zeitquanten = args.quantum

if interaktive_eingabe:
    # Ausgabe der Eingaben, wenn sie interaktiv eingegeben wurden
    print('Anzahl der Warteschlangen:', anzahlWS)
    print('Zeitquantum: ',zeitquanten)
    print(f'Verwendeter Dateipfad: {process_list_file}')    
    
else:
    # Überprüfung und Ausgabe der Eingaben, wenn sie über Kommandozeilenargumente eingegeben wurden
    print("\nÜberprüfen Sie Ihre Eingaben: ")
    print(f"Anzahl der Warteschlangen: {args.warteschlangen}")
    print(f"Quanten: {args.quantum}")
    print(f"Prozessliste: {args.processlistfile}")
    print(f"Logdatei: {args.logdatei}")
    print(f"Ausgabedatei: {args.ausgabedatei}")
    print(f"Ausgabeformat: {args.ausgabeformat}")


# Methode zum Einlesen der Prozesse
def lese_prozess_list(dateiname):
    prozesse = []
    try:
       with open(dateiname, 'r') as file:
           for line in file:
               parts = line.strip().split(',')
               if len(parts) == 3:  
                   # Dictionary 
                   prozess = {
                       'name': parts[0],
                       'cpu_time': int(parts[1]),
                       'ankunftszeit': int(parts[2])
                }
               prozesse.append(prozess)
    except FileNotFoundError:
        print(f'Fehler: Die Datei {dateiname} wurde nicht gefunden.')
        return []
    except Exception as e:
        print(f'Ein Fehler ist aufgetreten: {e}')
        return []
    return prozesse   

# P aus der Datei lesen
prozess_liste = lese_prozess_list(process_list_file)

# Grundkonfiguration Logdatei
logging.basicConfig(filename=args.logdatei, level=logging.INFO, format='%(asctime)s - %(message)s')

# Start Multilevel-Feedback-Schedule
scheduling_warteschlangen = list(zip(zeitquanten, [[] for _ in range(anzahlWS)]))   # Erstellt eine Liste von "Zeitquantum, Warteschlange"-Tupeln für jede einzelne Warteschlange
laufzeit = {prozess['name']: 0 for prozess in prozess_liste}    # Anfangslaufzeit für jeden Prozess ist 0
gesamt_wartezeit = {prozess['name']: 0 for prozess in prozess_liste}    # Wartezeit von jedem Prozess ist zu Beginn 0
letzte_ausfuehrungszeit = {prozess['name']: prozess['ankunftszeit'] for prozess in prozess_liste} # Anfangswert ist die Ankunftszeit des Prozesses
zeit = 0 

# Alle P werden in die erste WS eingefügt
for prozess in prozess_liste:
    scheduling_warteschlangen[0][1].append(prozess)
    
# Speichert die originale CPU-Zeit jedes Prozesses
original_cpu_time = {prozess['name']: prozess['cpu_time'] for prozess in prozess_liste} 
    
def update_wartezeiten(prozess, aktuelle_zeit, gesamt_wartezeit, letzte_ausfuehrungszeit):
    wartezeit = aktuelle_zeit - letzte_ausfuehrungszeit[prozess['name']]    # Berechnet die Wartezeit des Prozesses seit der letzten Ausführung
    gesamt_wartezeit[prozess['name']] += wartezeit  # Aktualisiert die Gesamtwartezeit des Prozesses
    letzte_ausfuehrungszeit[prozess['name']] = aktuelle_zeit    # Aktualisiert die letzte Ausführungszeit des Prozesses auf die aktuelle Zeit
    
def update_laufzeiten(prozess, ausgefuehrte_zeit, laufzeit):
    laufzeit[prozess['name']] += ausgefuehrte_zeit  # Erhöht die Laufzeit des Prozesses um die ausgeführte Zeit
    
def round_robin_algorithmus(scheduling_warteschlangen): 
    ausfuehrung_reihenfolge = []    # Initialisierung der leeren Liste zur Speicherung der Ausführungsreihenfolge der Prozesse
    global zeit
    i = 0
    while i < len(scheduling_warteschlangen):
        quantum, warteschlange = scheduling_warteschlangen[i]
        while warteschlange: # Vearbeitet die aktuelle Warteschlange
            prozess = warteschlange.pop(0)  # Entnimmt den ersten Prozess aus der Warteschlange
             
            # Update vor Prozessauführung 
            update_wartezeiten(prozess, zeit, gesamt_wartezeit, letzte_ausfuehrungszeit) 
    
            # Reduzierung der CPU-Zeit
            ausfuehrungs_zeit = min(quantum, prozess['cpu_time'])
            prozess['cpu_time'] -= ausfuehrungs_zeit
            zeit += ausfuehrungs_zeit
             
            # Update der Laufzeit 
            update_laufzeiten(prozess, ausfuehrungs_zeit, laufzeit)
            letzte_ausfuehrungszeit[prozess['name']] = zeit
             
            # Startsignal 
            logging.info(f"Prozess {prozess['name']} wird bearbeitet")
            logging.info(f"Prozess {prozess['name']} bearbeitet für {ausfuehrungs_zeit} Sekunden. Verbleibende CPU-Zeit: {prozess['cpu_time']}")
            
            # Weiterleitung in tiefere WS    
            if prozess['cpu_time'] > 0: 
                # Hinzufügung von wichtigen Informationen wie zum Beispiel Name, Startpunkt und Endzeit in die leere Liste
                ausfuehrung_reihenfolge.append((prozess['name'], zeit-ausfuehrungs_zeit, zeit, False))
                     
                # Überprüfung auf tiefere Warteschlangen          
                if i < len(scheduling_warteschlangen) - 1:
                    scheduling_warteschlangen[i+1][1].append(prozess)   # Prozess wird tieferen Warteschlange hinzugefügt
                    
                else: 
                    warteschlange.append(prozess)   # Prozess bleibt in der selben Warteschlange
                    
            else:
                ausfuehrung_reihenfolge.append((prozess['name'], zeit-ausfuehrungs_zeit, zeit, True))
                laufzeit[prozess['name']] = zeit
                logging.info(f"Prozess {prozess['name']} abgeschlossen.")

        i += 1
        
    return ausfuehrung_reihenfolge

# Aufruf der Funktion
ausfuehrung_reihenfolge = round_robin_algorithmus(scheduling_warteschlangen)

print('Zusammenfassung der Prozessdaten:')
for prozess in prozess_liste:
    print(f"Prozess: {prozess['name']}, Original CPU Zeit: {original_cpu_time[prozess['name']]}, "
          f"Aktuelle CPU Zeit: {prozess['cpu_time']}, Ankunftszeit: {prozess['ankunftszeit']}, "
          f"Laufzeit: {laufzeit[prozess['name']]}, Wartezeit: {gesamt_wartezeit[prozess['name']]}")

# Durchschnittliche Laufzeit und Wartezeit berechnen
durchschnittliche_laufzeit = sum(laufzeit[prozess['name']] - prozess['ankunftszeit'] for prozess in prozess_liste) / len(prozess_liste)
durchschnittliche_wartezeit = sum(gesamt_wartezeit[prozess['name']] for prozess in prozess_liste) / len(prozess_liste)

print(f"Durchschnittliche Laufzeit: {durchschnittliche_laufzeit}")
print(f"Durchschnittliche Wartezeit: {durchschnittliche_wartezeit}")

prozess_liste = lese_prozess_list(args.processlistfile)

# Gantt Diagramm
def erstelle_gantt_diagramm(dateiname, ausfuehrung_reihenfolge): 
 fig, achse = plt.subplots(figsize=(10,6)) # Erstellen eines Diagramms 
 farben = {'vollständig':'limegreen','unvollständig': 'orange'} # Dictionary für die Farbzuordnung
 balken_hoehe = 0.4 # Höhe der Gantt Balken

 # Iterieren durch die Liste ausfuehrung_reihenfolge
 for(name, start, ende, abgeschlossen) in ausfuehrung_reihenfolge: 
     farbe = farben['unvollständig'] if abgeschlossen else farben['unvollständig'] # Farbzuweisung basierend auf dem Abschlussstatus des Prozesses
     achse.barh(name, ende-start, left=start, height=balken_hoehe, color=farbe, edgecolor='black') # Zeichnet einen Balken für den aktuellen Prozess

# Diagrammtitel 
 plt.title("Gantt-Diagramm der Prozessverarbeitung", fontsize=14, fontweight='bold')

# Achsenbeschriftungen 
 achse.set_xlabel('Zeit (in Sekunden)', fontsize=10)
 achse.set_ylabel('Prozesse', fontsize=10)

 # Gitterlinien 
 achse.grid(True, linestyle='--', linewidth=0.5, zorder=0)

 # Legende 
 from matplotlib.patches import Patch
 legende = [Patch(color=farben['unvollständig'],label='Abgeschlossen'),
            Patch(color=farben['unvollständig'], label='Unvollständig')]
 achse.legend(handles=legende, title='Status', fontsize=10)

 # Diagramm speichern und schließen 
 plt.tight_layout()
 plt.savefig(dateiname)
 plt.close()


# Prüfen ob das Ausgabeformat 'grafisch' gewählt wurde
if args.ausgabeformat == 'grafisch': 
    erstelle_gantt_diagramm(args.ausgabedatei, ausfuehrung_reihenfolge) # Gantt in der Ausgabedatei speichern 

else: # Falls 'text' als Ausgabeformat gewählt wurde 
 with open(args.ausgabedatei, 'w') as f: 
   # Print der wichtigsten Informationen in die Ausgabedatei
   f.write('Anzahl der Warteschlangen: {anzahlWS}\n') 
   f.write('Zeitquanten: {zeitquanten}\n')
   
   # Laufzeit fehlt
   # Wartezeiten fehlt
   # durchschnittliche Laufzeit fehlt
   # durchschnittliche Wartezeit fehlt

print(f"Name der Ausgabedatei: {args.ausgabedatei}")




