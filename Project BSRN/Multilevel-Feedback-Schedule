#
import argparse

# Bibliothek für Gantt-Diagramm
# Pyplot durch "as pyp" in pyp umbenannt
import matplotlib.pyplot as pyp

# Parser einrichten
parser = argparse.ArgumentParser(description= 'Prozesse einlesen')
parser.add_argument('-processlistfile', type=str, required=True,help ='Geben Sie den Pfad zur Prozessliste an')
parser.add_argument('-warteschlangen' , type=int, required=False, help = 'Anzahl der Warteschlangen')
parser.add_argument('-quantum', type=int, nargs='+', required=False, help='Liste von Zeitquanten für jede Warteschlange')
args = parser.parse_args()

# Dateipfad aus den Argumenten auslesen
process_list_file = args.processlistfile

#per Kommandozeilenargumente, wenn vorhanden
if args.warteschlangen is not None and args.quantum is not None:
     anzahlWS = args.warteschlangen
     zeitquanten = args.quantum
else:
    #Interaktive Benutzereingabe, wenn Kommandozentrale leer
    anzahlWS = int(input('Gebe die Anzahl der Warteschlangen an: '))
    zeitquanten = []
    for i in range(anzahlWS):
        zeitquanten.append(int(input(f'Gebe das Zeitquantum für Warteschlange {i+1} an:')))
        
# Print Ausgabe
print('Anzahl der Warteschlangen:', anzahlWS)
print('Zeitquantum: ',zeitquanten)
print(f'Verwendeter Dateipfad: {process_list_file}')


#Methode zum Einlesen der Prozesse
def lese_prozess_list(dateiname):
    prozesse = []
    try:
       with open(dateiname, 'r') as file:
           for line in file:
               parts = line.strip().split(',')
               
               if len(parts)== 3:  
                       
                   #Dictionary 
                   prozess = {
                       'name': parts[0],
                       'cpu_time': int(parts[1]),
                       'ankunftszeit': int(parts[2])
                }
               prozesse.append(prozess)
               
    except FileNotFoundError:
        print(f'Fehler: Die Datei {dateiname} wurde nicht gefunden.')
        return []
    except Exception as e:
        print(f'Ein Fehler ist aufgetreten: {e}')
        return []
    return prozesse   

# Prozesse aus der Datei lesen
prozess_liste = lese_prozess_list(process_list_file)

# Erstellen von leeren Listen für Laufzeit und Wartezeit
laufzeiten = []
wartezeiten = []

# Laufzeiten in der Liste abspeichern 
for prozess in prozess_liste :
    lz = prozess['cpu_time']
    laufzeiten.append(lz)
    
    wartezeiten.append(0)
    
# Start Multilevel-Feedback-Schedule
# Initalisierung der Warteschlangen
 
warteschlangen = [[] for _ in range(anzahlWS)]

# Prozesse in WS1 hinzugefügt
for prozess in prozess_liste:
    warteschlangen[0].append(prozess)

# Ausgabe aller Prozesse
print("Prozesse in der ersten Warteschlange:")
for prozess in warteschlangen[0]:
    print(prozess)

# Verwaltung der Warteschlangen









# Ausgabe der Laufzeit und Wartezeit 
for i, prozesse in enumerate(prozess_liste) :
    print(f'Prozess {i + 1}: Name = {prozess["name"]}, Laufzeit = {laufzeiten[i]}, Wartezeit = {wartezeiten[i]}')

# Gantt-Diagramm
# (man kann noch schriftgröse und platzierung der Titel einstellen)
fig, achse = pyp.subplots()

# Wert für breite notwendig -> So machbar?
for i, prozess in enumerate(prozess_liste) :
    achse.barh(prozess, width = prozess('cpu_time'), left = prozess('ankunftszeit'), color = "green")

# Limiter für x und y Achse muss gesetzt werden
pyp.xlim()
pyp.xlabel("Zeit in Sekunden")

pyp.ylim()
pyp.ylabel("Prozesse")

pyp.title("Gantt-Diagramm der Prozessverarbeitung")

pyp.show()